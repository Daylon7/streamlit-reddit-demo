"""
Reddit WSB Sentiment Analysis - Streamlit App
Aplicaci√≥n web para interactuar con la API de predicciones
"""

import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import json

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Reddit WSB Sentiment Analysis",
    page_icon="ÔøΩÔøΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuraci√≥n de la API
API_BASE_URL = "https://daylong-datalab-reddit.hf.space"  # Cambiar por tu URL real

# T√≠tulos y descripci√≥n
st.title("üìà Reddit WSB Sentiment Analysis")
st.markdown("**An√°lisis de sentimiento y predicci√≥n de retornos financieros usando XGBoost**")

# Sidebar para configuraci√≥n
st.sidebar.header("‚öôÔ∏è Configuraci√≥n")

# Selector de API
api_url = st.sidebar.text_input(
    "URL de la API", 
    value=API_BASE_URL,
    help="URL de tu API desplegada en Hugging Face"
)

# Verificar conexi√≥n con la API
@st.cache_data(ttl=60)
def check_api_health(api_url):
    """Verificar si la API est√° funcionando"""
    try:
        response = requests.get(f"{api_url}/health", timeout=10)
        if response.status_code == 200:
            return True, response.json()
        else:
            return False, None
    except:
        return False, None

# Verificar API
with st.spinner("Verificando conexi√≥n con la API..."):
    api_healthy, health_data = check_api_health(api_url)

if api_healthy:
    st.success("‚úÖ API conectada correctamente")
    if health_data:
        st.info(f"Modelo cargado: {'‚úÖ' if health_data.get('model_loaded') else '‚ùå'}")
else:
    st.error("‚ùå No se pudo conectar con la API. Verifica la URL.")
    st.stop()

# Funci√≥n para hacer predicciones
@st.cache_data(ttl=300)  # Cache por 5 minutos
def get_prediction(symbol, include_sentiment=True):
    """Obtener predicci√≥n de la API"""
    try:
        response = requests.get(
            f"{api_url}/predict/{symbol}",
            params={"include_sentiment": include_sentiment},
            timeout=30
        )
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        st.error(f"Error obteniendo predicci√≥n: {e}")
        return None

# Funci√≥n para obtener informaci√≥n del modelo
@st.cache_data(ttl=3600)  # Cache por 1 hora
def get_model_info():
    """Obtener informaci√≥n del modelo"""
    try:
        response = requests.get(f"{api_url}/model/info", timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except:
        return None

# Funci√≥n para obtener datos hist√≥ricos
def get_historical_data(symbol, days=30):
    """Obtener datos hist√≥ricos usando yfinance"""
    try:
        import yfinance as yf
        ticker = yf.Ticker(symbol)
        hist = ticker.history(period=f"{days}d")
        return hist
    except:
        return None

# Contenido principal
tab1, tab2, tab3, tab4 = st.tabs(["ÔøΩÔøΩ Predicciones", "ÔøΩÔøΩ An√°lisis", "üìà Gr√°ficos", "‚ÑπÔ∏è Informaci√≥n"])

with tab1:
    st.header("Predicciones en Tiempo Real")
    
    # Input del usuario
    col1, col2 = st.columns([2, 1])
    
    with col1:
        symbol = st.text_input(
            "S√≠mbolo de la acci√≥n",
            value="TSLA",
            placeholder="Ej: AAPL, TSLA, MSFT, GOOGL",
            help="Ingresa el s√≠mbolo de la acci√≥n que quieres analizar"
        ).upper()
    
    with col2:
        include_sentiment = st.checkbox(
            "Incluir sentimiento de Reddit",
            value=True,
            help="Incluir an√°lisis de sentimiento de Reddit (requiere configuraci√≥n)"
        )
    
    # Bot√≥n para hacer predicci√≥n
    if st.button("ÔøΩÔøΩ Hacer Predicci√≥n", type="primary"):
        if symbol:
            with st.spinner(f"Analizando {symbol}..."):
                prediction_data = get_prediction(symbol, include_sentiment)
                
                if prediction_data:
                    # Mostrar resultados
                    st.success("‚úÖ Predicci√≥n completada")
                    
                    # M√©tricas principales
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric(
                            "Predicci√≥n (%)",
                            f"{prediction_data['prediction_percent']:.2f}%",
                            delta=f"{prediction_data['prediction_percent']:.2f}%"
                        )
                    
                    with col2:
                        st.metric(
                            "Confianza",
                            f"{prediction_data['confidence']:.1%}",
                            help="Nivel de confianza del modelo"
                        )
                    
                    with col3:
                        st.metric(
                            "S√≠mbolo",
                            prediction_data['symbol'],
                            help="S√≠mbolo analizado"
                        )
                    
                    with col4:
                        st.metric(
                            "Timestamp",
                            prediction_data['timestamp'][:19],
                            help="Hora de la predicci√≥n"
                        )
                    
                    # Informaci√≥n adicional
                    st.subheader("üìã Detalles de la Predicci√≥n")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.json({
                            "Predicci√≥n (log return)": f"{prediction_data['prediction']:.6f}",
                            "Predicci√≥n (%)": f"{prediction_data['prediction_percent']:.2f}%",
                            "Confianza": f"{prediction_data['confidence']:.1%}",
                            "S√≠mbolo": prediction_data['symbol']
                        })
                    
                    with col2:
                        st.json(prediction_data['data_sources'])
                    
                    # Interpretaci√≥n
                    st.subheader("üí° Interpretaci√≥n")
                    pred_pct = prediction_data['prediction_percent']
                    
                    if pred_pct > 2:
                        st.success(f"üìà **Tendencia Alcista Fuerte**: {symbol} podr√≠a subir {pred_pct:.2f}%")
                    elif pred_pct > 0:
                        st.info(f"üìà **Tendencia Alcista**: {symbol} podr√≠a subir {pred_pct:.2f}%")
                    elif pred_pct > -2:
                        st.warning(f"üìâ **Tendencia Bajista**: {symbol} podr√≠a bajar {abs(pred_pct):.2f}%")
                    else:
                        st.error(f"üìâ **Tendencia Bajista Fuerte**: {symbol} podr√≠a bajar {abs(pred_pct):.2f}%")
                    
                    # Advertencia
                    st.warning("‚ö†Ô∏è **Advertencia**: Estas predicciones son solo para fines educativos y no constituyen consejos de inversi√≥n.")
                    
                else:
                    st.error("‚ùå No se pudo obtener la predicci√≥n. Verifica el s√≠mbolo y la conexi√≥n.")
        else:
            st.warning("‚ö†Ô∏è Por favor ingresa un s√≠mbolo v√°lido.")

with tab2:
    st.header("An√°lisis Comparativo")
    
    # M√∫ltiples s√≠mbolos
    st.subheader("Comparar M√∫ltiples Acciones")
    
    symbols_input = st.text_input(
        "S√≠mbolos separados por comas",
        value="AAPL,TSLA,MSFT,GOOGL,NVDA",
        help="Ej: AAPL,TSLA,MSFT,GOOGL,NVDA"
    )
    
    if st.button("ÔøΩÔøΩ Analizar M√∫ltiples", type="primary"):
        symbols = [s.strip().upper() for s in symbols_input.split(",") if s.strip()]
        
        if symbols:
            with st.spinner("Analizando m√∫ltiples acciones..."):
                predictions = []
                
                for symbol in symbols:
                    pred_data = get_prediction(symbol, include_sentiment)
                    if pred_data:
                        predictions.append({
                            "S√≠mbolo": symbol,
                            "Predicci√≥n (%)": pred_data['prediction_percent'],
                            "Confianza": pred_data['confidence'],
                            "Timestamp": pred_data['timestamp'][:19]
                        })
                
                if predictions:
                    df = pd.DataFrame(predictions)
                    
                    # Mostrar tabla
                    st.subheader("üìã Resultados Comparativos")
                    st.dataframe(df, use_container_width=True)
                    
                    # Gr√°fico de barras
                    fig = px.bar(
                        df, 
                        x="S√≠mbolo", 
                        y="Predicci√≥n (%)",
                        title="Predicciones por S√≠mbolo",
                        color="Predicci√≥n (%)",
                        color_continuous_scale="RdYlGn"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Ranking
                    st.subheader("üèÜ Ranking de Predicciones")
                    df_sorted = df.sort_values("Predicci√≥n (%)", ascending=False)
                    
                    for i, (_, row) in enumerate(df_sorted.iterrows(), 1):
                        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìä"
                        st.write(f"{emoji} **{i}.** {row['S√≠mbolo']}: {row['Predicci√≥n (%)']:.2f}%")
                else:
                    st.error("‚ùå No se pudieron obtener predicciones para ning√∫n s√≠mbolo.")

with tab3:
    st.header("Visualizaciones")
    
    # Selector de s√≠mbolo para gr√°ficos
    chart_symbol = st.selectbox(
        "Seleccionar s√≠mbolo para gr√°ficos",
        ["AAPL", "TSLA", "MSFT", "GOOGL", "NVDA", "AMZN", "META"],
        index=1
    )
    
    # Obtener datos hist√≥ricos
    with st.spinner("Obteniendo datos hist√≥ricos..."):
        hist_data = get_historical_data(chart_symbol, days=30)
    
    if hist_data is not None and not hist_data.empty:
        # Gr√°fico de precios
        st.subheader(f"ÔøΩÔøΩ Precios Hist√≥ricos - {chart_symbol}")
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=hist_data.index,
            y=hist_data['Close'],
            mode='lines',
            name='Precio de Cierre',
            line=dict(color='blue', width=2)
        ))
        
        fig.update_layout(
            title=f"Precio de Cierre - {chart_symbol} (30 d√≠as)",
            xaxis_title="Fecha",
            yaxis_title="Precio ($)",
            hovermode='x unified'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Gr√°fico de volumen
        st.subheader(f"ÔøΩÔøΩ Volumen de Trading - {chart_symbol}")
        
        fig_vol = go.Figure()
        fig_vol.add_trace(go.Bar(
            x=hist_data.index,
            y=hist_data['Volume'],
            name='Volumen',
            marker_color='lightblue'
        ))
        
        fig_vol.update_layout(
            title=f"Volumen de Trading - {chart_symbol} (30 d√≠as)",
            xaxis_title="Fecha",
            yaxis_title="Volumen",
            hovermode='x unified'
        )
        
        st.plotly_chart(fig_vol, use_container_width=True)
        
        # Estad√≠sticas
        st.subheader("üìä Estad√≠sticas")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Precio Actual", f"${hist_data['Close'].iloc[-1]:.2f}")
        
        with col2:
            change = hist_data['Close'].iloc[-1] - hist_data['Close'].iloc[0]
            st.metric("Cambio (30d)", f"${change:.2f}")
        
        with col3:
            change_pct = (change / hist_data['Close'].iloc[0]) * 100
            st.metric("Cambio % (30d)", f"{change_pct:.2f}%")
        
        with col4:
            avg_vol = hist_data['Volume'].mean()
            st.metric("Volumen Promedio", f"{avg_vol:,.0f}")
    
    else:
        st.error("‚ùå No se pudieron obtener datos hist√≥ricos.")

with tab4:
    st.header("Informaci√≥n del Sistema")
    
    # Informaci√≥n del modelo
    model_info = get_model_info()
    
    if model_info:
        st.subheader("ü§ñ Informaci√≥n del Modelo")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.json({
                "Tipo de Modelo": model_info.get('model_type', 'N/A'),
                "Features": model_info.get('features_count', 'N/A'),
                "Cargado": model_info.get('loaded', False),
                "Versi√≥n": model_info.get('version', 'N/A')
            })
        
        with col2:
            st.success("‚úÖ Modelo XGBoost cargado correctamente")
            st.info(f"üî¢ {model_info.get('features_count', 'N/A')} features utilizadas")
    
    # Informaci√≥n de la API
    st.subheader("üîó Estado de la API")
    
    if health_data:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Estado", "‚úÖ Saludable")
        
        with col2:
            st.metric("Modelo", "‚úÖ Cargado" if health_data.get('model_loaded') else "‚ùå No cargado")
        
        with col3:
            st.metric("Reddit", "‚úÖ Disponible" if health_data.get('reddit_available') else "‚ùå No disponible")
    
    # Informaci√≥n de la aplicaci√≥n
    st.subheader("‚ÑπÔ∏è Acerca de la Aplicaci√≥n")
    
    st.markdown("""
    ### Reddit WSB Sentiment Analysis
    
    Esta aplicaci√≥n utiliza un modelo XGBoost entrenado para predecir retornos financieros bas√°ndose en:
    
    - **Datos financieros**: Precios OHLCV, volumen, indicadores t√©cnicos
    - **An√°lisis de sentimiento**: Posts de Reddit r/wallstreetbets
    - **Indicadores t√©cnicos**: RSI, MACD, SMA, Bollinger Bands
    
    ### Caracter√≠sticas:
    
    - üîÆ Predicciones en tiempo real
    - üìä An√°lisis comparativo de m√∫ltiples acciones
    - üìà Visualizaciones interactivas
    - ü§ñ Modelo XGBoost entrenado
    
    ### Advertencia:
    
    ‚ö†Ô∏è **Las predicciones son solo para fines educativos y no constituyen consejos de inversi√≥n.**
    """)
    
    # Footer
    st.markdown("---")
    st.markdown("**Desarrollado con ‚ù§Ô∏è usando Streamlit y FastAPI**")

# Sidebar adicional
st.sidebar.markdown("---")
st.sidebar.markdown("### üìä Estad√≠sticas de Uso")

# Simular estad√≠sticas (en una app real, esto vendr√≠a de una base de datos)
st.sidebar.metric("Predicciones Hoy", "42")
st.sidebar.metric("S√≠mbolos Analizados", "15")
st.sidebar.metric("Tiempo Promedio", "2.3s")

st.sidebar.markdown("---")
st.sidebar.markdown("### üîó Enlaces")
st.sidebar.markdown("- [Documentaci√≥n API](/docs)")
st.sidebar.markdown("- [C√≥digo Fuente](https://github.com/tu-usuario)")
st.sidebar.markdown("- [Reportar Bug](https://github.com/tu-usuario/issues)")

# Auto-refresh (opcional)
if st.sidebar.checkbox("üîÑ Auto-refresh (30s)", value=False):
    time.sleep(30)
    st.rerun()
